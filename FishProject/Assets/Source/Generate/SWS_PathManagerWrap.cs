//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class SWS_PathManagerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(SWS.PathManager), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("Create", Create);
		L.RegFunction("GetHandleSize", GetHandleSize);
		L.RegFunction("GetPathPoints", GetPathPoints);
		L.RegFunction("GetWaypoint", GetWaypoint);
		L.RegFunction("GetWaypointIndex", GetWaypointIndex);
		L.RegFunction("GetWaypointCount", GetWaypointCount);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("waypoints", get_waypoints, set_waypoints);
		L.RegVar("drawCurved", get_drawCurved, set_drawCurved);
		L.RegVar("drawDirection", get_drawDirection, set_drawDirection);
		L.RegVar("color1", get_color1, set_color1);
		L.RegVar("color2", get_color2, set_color2);
		L.RegVar("size", get_size, set_size);
		L.RegVar("radius", get_radius, set_radius);
		L.RegVar("skipCustomNames", get_skipCustomNames, set_skipCustomNames);
		L.RegVar("replaceObject", get_replaceObject, set_replaceObject);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Create(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				SWS.PathManager obj = (SWS.PathManager)ToLua.CheckObject<SWS.PathManager>(L, 1);
				obj.Create();
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<UnityEngine.Transform[]>(L, 2))
			{
				SWS.PathManager obj = (SWS.PathManager)ToLua.CheckObject<SWS.PathManager>(L, 1);
				UnityEngine.Transform[] arg0 = ToLua.ToObjectArray<UnityEngine.Transform>(L, 2);
				obj.Create(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<UnityEngine.Transform>(L, 2))
			{
				SWS.PathManager obj = (SWS.PathManager)ToLua.CheckObject<SWS.PathManager>(L, 1);
				UnityEngine.Transform arg0 = (UnityEngine.Transform)ToLua.ToObject(L, 2);
				obj.Create(arg0);
				return 0;
			}
			else if (count == 3)
			{
				SWS.PathManager obj = (SWS.PathManager)ToLua.CheckObject<SWS.PathManager>(L, 1);
				UnityEngine.Transform[] arg0 = ToLua.CheckObjectArray<UnityEngine.Transform>(L, 2);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
				obj.Create(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: SWS.PathManager.Create");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetHandleSize(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			SWS.PathManager obj = (SWS.PathManager)ToLua.CheckObject<SWS.PathManager>(L, 1);
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			float o = obj.GetHandleSize(arg0);
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetPathPoints(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				SWS.PathManager obj = (SWS.PathManager)ToLua.CheckObject<SWS.PathManager>(L, 1);
				UnityEngine.Vector3[] o = obj.GetPathPoints();
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 2)
			{
				SWS.PathManager obj = (SWS.PathManager)ToLua.CheckObject<SWS.PathManager>(L, 1);
				bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
				UnityEngine.Vector3[] o = obj.GetPathPoints(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: SWS.PathManager.GetPathPoints");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetWaypoint(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			SWS.PathManager obj = (SWS.PathManager)ToLua.CheckObject<SWS.PathManager>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			UnityEngine.Transform o = obj.GetWaypoint(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetWaypointIndex(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			SWS.PathManager obj = (SWS.PathManager)ToLua.CheckObject<SWS.PathManager>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			int o = obj.GetWaypointIndex(arg0);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetWaypointCount(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SWS.PathManager obj = (SWS.PathManager)ToLua.CheckObject<SWS.PathManager>(L, 1);
			int o = obj.GetWaypointCount();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_waypoints(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SWS.PathManager obj = (SWS.PathManager)o;
			UnityEngine.Transform[] ret = obj.waypoints;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index waypoints on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_drawCurved(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SWS.PathManager obj = (SWS.PathManager)o;
			bool ret = obj.drawCurved;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index drawCurved on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_drawDirection(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SWS.PathManager obj = (SWS.PathManager)o;
			bool ret = obj.drawDirection;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index drawDirection on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_color1(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SWS.PathManager obj = (SWS.PathManager)o;
			UnityEngine.Color ret = obj.color1;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index color1 on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_color2(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SWS.PathManager obj = (SWS.PathManager)o;
			UnityEngine.Color ret = obj.color2;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index color2 on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_size(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SWS.PathManager obj = (SWS.PathManager)o;
			UnityEngine.Vector3 ret = obj.size;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index size on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_radius(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SWS.PathManager obj = (SWS.PathManager)o;
			float ret = obj.radius;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index radius on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_skipCustomNames(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SWS.PathManager obj = (SWS.PathManager)o;
			bool ret = obj.skipCustomNames;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index skipCustomNames on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_replaceObject(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SWS.PathManager obj = (SWS.PathManager)o;
			UnityEngine.GameObject ret = obj.replaceObject;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index replaceObject on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_waypoints(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SWS.PathManager obj = (SWS.PathManager)o;
			UnityEngine.Transform[] arg0 = ToLua.CheckObjectArray<UnityEngine.Transform>(L, 2);
			obj.waypoints = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index waypoints on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_drawCurved(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SWS.PathManager obj = (SWS.PathManager)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.drawCurved = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index drawCurved on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_drawDirection(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SWS.PathManager obj = (SWS.PathManager)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.drawDirection = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index drawDirection on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_color1(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SWS.PathManager obj = (SWS.PathManager)o;
			UnityEngine.Color arg0 = ToLua.ToColor(L, 2);
			obj.color1 = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index color1 on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_color2(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SWS.PathManager obj = (SWS.PathManager)o;
			UnityEngine.Color arg0 = ToLua.ToColor(L, 2);
			obj.color2 = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index color2 on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_size(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SWS.PathManager obj = (SWS.PathManager)o;
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			obj.size = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index size on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_radius(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SWS.PathManager obj = (SWS.PathManager)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.radius = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index radius on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_skipCustomNames(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SWS.PathManager obj = (SWS.PathManager)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.skipCustomNames = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index skipCustomNames on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_replaceObject(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SWS.PathManager obj = (SWS.PathManager)o;
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 2, typeof(UnityEngine.GameObject));
			obj.replaceObject = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index replaceObject on a nil value");
		}
	}
}

