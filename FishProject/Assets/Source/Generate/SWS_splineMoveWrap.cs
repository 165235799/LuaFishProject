//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class SWS_splineMoveWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(SWS.splineMove), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("StartMove", StartMove);
		L.RegFunction("GoToWaypoint", GoToWaypoint);
		L.RegFunction("Pause", Pause);
		L.RegFunction("Resume", Resume);
		L.RegFunction("Reverse", Reverse);
		L.RegFunction("SetPath", SetPath);
		L.RegFunction("Stop", Stop);
		L.RegFunction("ResetToStart", ResetToStart);
		L.RegFunction("ChangeSpeed", ChangeSpeed);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("pathContainer", get_pathContainer, set_pathContainer);
		L.RegVar("onStart", get_onStart, set_onStart);
		L.RegVar("moveToPath", get_moveToPath, set_moveToPath);
		L.RegVar("reverse", get_reverse, set_reverse);
		L.RegVar("startPoint", get_startPoint, set_startPoint);
		L.RegVar("currentPoint", get_currentPoint, set_currentPoint);
		L.RegVar("closeLoop", get_closeLoop, set_closeLoop);
		L.RegVar("local", get_local, set_local);
		L.RegVar("lookAhead", get_lookAhead, set_lookAhead);
		L.RegVar("sizeToAdd", get_sizeToAdd, set_sizeToAdd);
		L.RegVar("timeValue", get_timeValue, set_timeValue);
		L.RegVar("speed", get_speed, set_speed);
		L.RegVar("animEaseType", get_animEaseType, set_animEaseType);
		L.RegVar("loopType", get_loopType, set_loopType);
		L.RegVar("waypoints", get_waypoints, set_waypoints);
		L.RegVar("events", get_events, set_events);
		L.RegVar("pathType", get_pathType, set_pathType);
		L.RegVar("pathMode", get_pathMode, set_pathMode);
		L.RegVar("easeType", get_easeType, set_easeType);
		L.RegVar("lockPosition", get_lockPosition, set_lockPosition);
		L.RegVar("lockRotation", get_lockRotation, set_lockRotation);
		L.RegVar("waypointRotation", get_waypointRotation, set_waypointRotation);
		L.RegVar("rotationTarget", get_rotationTarget, set_rotationTarget);
		L.RegVar("tween", get_tween, set_tween);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StartMove(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SWS.splineMove obj = (SWS.splineMove)ToLua.CheckObject<SWS.splineMove>(L, 1);
			obj.StartMove();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GoToWaypoint(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			SWS.splineMove obj = (SWS.splineMove)ToLua.CheckObject<SWS.splineMove>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.GoToWaypoint(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Pause(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				SWS.splineMove obj = (SWS.splineMove)ToLua.CheckObject<SWS.splineMove>(L, 1);
				obj.Pause();
				return 0;
			}
			else if (count == 2)
			{
				SWS.splineMove obj = (SWS.splineMove)ToLua.CheckObject<SWS.splineMove>(L, 1);
				float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
				obj.Pause(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: SWS.splineMove.Pause");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Resume(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SWS.splineMove obj = (SWS.splineMove)ToLua.CheckObject<SWS.splineMove>(L, 1);
			obj.Resume();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Reverse(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SWS.splineMove obj = (SWS.splineMove)ToLua.CheckObject<SWS.splineMove>(L, 1);
			obj.Reverse();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetPath(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			SWS.splineMove obj = (SWS.splineMove)ToLua.CheckObject<SWS.splineMove>(L, 1);
			SWS.PathManager arg0 = (SWS.PathManager)ToLua.CheckObject<SWS.PathManager>(L, 2);
			obj.SetPath(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Stop(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SWS.splineMove obj = (SWS.splineMove)ToLua.CheckObject<SWS.splineMove>(L, 1);
			obj.Stop();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ResetToStart(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SWS.splineMove obj = (SWS.splineMove)ToLua.CheckObject<SWS.splineMove>(L, 1);
			obj.ResetToStart();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ChangeSpeed(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			SWS.splineMove obj = (SWS.splineMove)ToLua.CheckObject<SWS.splineMove>(L, 1);
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.ChangeSpeed(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_pathContainer(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SWS.splineMove obj = (SWS.splineMove)o;
			SWS.PathManager ret = obj.pathContainer;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index pathContainer on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onStart(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SWS.splineMove obj = (SWS.splineMove)o;
			bool ret = obj.onStart;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index onStart on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_moveToPath(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SWS.splineMove obj = (SWS.splineMove)o;
			bool ret = obj.moveToPath;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index moveToPath on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_reverse(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SWS.splineMove obj = (SWS.splineMove)o;
			bool ret = obj.reverse;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index reverse on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_startPoint(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SWS.splineMove obj = (SWS.splineMove)o;
			int ret = obj.startPoint;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index startPoint on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_currentPoint(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SWS.splineMove obj = (SWS.splineMove)o;
			int ret = obj.currentPoint;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index currentPoint on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_closeLoop(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SWS.splineMove obj = (SWS.splineMove)o;
			bool ret = obj.closeLoop;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index closeLoop on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_local(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SWS.splineMove obj = (SWS.splineMove)o;
			bool ret = obj.local;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index local on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_lookAhead(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SWS.splineMove obj = (SWS.splineMove)o;
			float ret = obj.lookAhead;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index lookAhead on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_sizeToAdd(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SWS.splineMove obj = (SWS.splineMove)o;
			float ret = obj.sizeToAdd;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index sizeToAdd on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_timeValue(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SWS.splineMove obj = (SWS.splineMove)o;
			SWS.splineMove.TimeValue ret = obj.timeValue;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index timeValue on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_speed(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SWS.splineMove obj = (SWS.splineMove)o;
			float ret = obj.speed;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index speed on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_animEaseType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SWS.splineMove obj = (SWS.splineMove)o;
			UnityEngine.AnimationCurve ret = obj.animEaseType;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index animEaseType on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_loopType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SWS.splineMove obj = (SWS.splineMove)o;
			SWS.splineMove.LoopType ret = obj.loopType;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index loopType on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_waypoints(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SWS.splineMove obj = (SWS.splineMove)o;
			UnityEngine.Vector3[] ret = obj.waypoints;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index waypoints on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_events(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SWS.splineMove obj = (SWS.splineMove)o;
			System.Collections.Generic.List<UnityEngine.Events.UnityEvent> ret = obj.events;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index events on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_pathType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SWS.splineMove obj = (SWS.splineMove)o;
			DG.Tweening.PathType ret = obj.pathType;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index pathType on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_pathMode(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SWS.splineMove obj = (SWS.splineMove)o;
			DG.Tweening.PathMode ret = obj.pathMode;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index pathMode on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_easeType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SWS.splineMove obj = (SWS.splineMove)o;
			DG.Tweening.Ease ret = obj.easeType;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index easeType on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_lockPosition(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SWS.splineMove obj = (SWS.splineMove)o;
			DG.Tweening.AxisConstraint ret = obj.lockPosition;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index lockPosition on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_lockRotation(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SWS.splineMove obj = (SWS.splineMove)o;
			DG.Tweening.AxisConstraint ret = obj.lockRotation;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index lockRotation on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_waypointRotation(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SWS.splineMove obj = (SWS.splineMove)o;
			SWS.splineMove.RotationType ret = obj.waypointRotation;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index waypointRotation on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_rotationTarget(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SWS.splineMove obj = (SWS.splineMove)o;
			UnityEngine.Transform ret = obj.rotationTarget;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index rotationTarget on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_tween(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SWS.splineMove obj = (SWS.splineMove)o;
			DG.Tweening.Tweener ret = obj.tween;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index tween on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_pathContainer(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SWS.splineMove obj = (SWS.splineMove)o;
			SWS.PathManager arg0 = (SWS.PathManager)ToLua.CheckObject<SWS.PathManager>(L, 2);
			obj.pathContainer = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index pathContainer on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onStart(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SWS.splineMove obj = (SWS.splineMove)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.onStart = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index onStart on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_moveToPath(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SWS.splineMove obj = (SWS.splineMove)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.moveToPath = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index moveToPath on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_reverse(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SWS.splineMove obj = (SWS.splineMove)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.reverse = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index reverse on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_startPoint(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SWS.splineMove obj = (SWS.splineMove)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.startPoint = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index startPoint on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_currentPoint(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SWS.splineMove obj = (SWS.splineMove)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.currentPoint = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index currentPoint on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_closeLoop(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SWS.splineMove obj = (SWS.splineMove)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.closeLoop = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index closeLoop on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_local(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SWS.splineMove obj = (SWS.splineMove)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.local = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index local on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_lookAhead(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SWS.splineMove obj = (SWS.splineMove)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.lookAhead = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index lookAhead on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_sizeToAdd(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SWS.splineMove obj = (SWS.splineMove)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.sizeToAdd = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index sizeToAdd on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_timeValue(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SWS.splineMove obj = (SWS.splineMove)o;
			SWS.splineMove.TimeValue arg0 = (SWS.splineMove.TimeValue)ToLua.CheckObject(L, 2, typeof(SWS.splineMove.TimeValue));
			obj.timeValue = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index timeValue on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_speed(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SWS.splineMove obj = (SWS.splineMove)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.speed = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index speed on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_animEaseType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SWS.splineMove obj = (SWS.splineMove)o;
			UnityEngine.AnimationCurve arg0 = (UnityEngine.AnimationCurve)ToLua.CheckObject<UnityEngine.AnimationCurve>(L, 2);
			obj.animEaseType = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index animEaseType on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_loopType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SWS.splineMove obj = (SWS.splineMove)o;
			SWS.splineMove.LoopType arg0 = (SWS.splineMove.LoopType)ToLua.CheckObject(L, 2, typeof(SWS.splineMove.LoopType));
			obj.loopType = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index loopType on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_waypoints(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SWS.splineMove obj = (SWS.splineMove)o;
			UnityEngine.Vector3[] arg0 = ToLua.CheckStructArray<UnityEngine.Vector3>(L, 2);
			obj.waypoints = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index waypoints on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_events(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SWS.splineMove obj = (SWS.splineMove)o;
			System.Collections.Generic.List<UnityEngine.Events.UnityEvent> arg0 = (System.Collections.Generic.List<UnityEngine.Events.UnityEvent>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.List<UnityEngine.Events.UnityEvent>));
			obj.events = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index events on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_pathType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SWS.splineMove obj = (SWS.splineMove)o;
			DG.Tweening.PathType arg0 = (DG.Tweening.PathType)ToLua.CheckObject(L, 2, typeof(DG.Tweening.PathType));
			obj.pathType = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index pathType on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_pathMode(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SWS.splineMove obj = (SWS.splineMove)o;
			DG.Tweening.PathMode arg0 = (DG.Tweening.PathMode)ToLua.CheckObject(L, 2, typeof(DG.Tweening.PathMode));
			obj.pathMode = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index pathMode on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_easeType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SWS.splineMove obj = (SWS.splineMove)o;
			DG.Tweening.Ease arg0 = (DG.Tweening.Ease)ToLua.CheckObject(L, 2, typeof(DG.Tweening.Ease));
			obj.easeType = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index easeType on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_lockPosition(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SWS.splineMove obj = (SWS.splineMove)o;
			DG.Tweening.AxisConstraint arg0 = (DG.Tweening.AxisConstraint)ToLua.CheckObject(L, 2, typeof(DG.Tweening.AxisConstraint));
			obj.lockPosition = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index lockPosition on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_lockRotation(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SWS.splineMove obj = (SWS.splineMove)o;
			DG.Tweening.AxisConstraint arg0 = (DG.Tweening.AxisConstraint)ToLua.CheckObject(L, 2, typeof(DG.Tweening.AxisConstraint));
			obj.lockRotation = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index lockRotation on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_waypointRotation(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SWS.splineMove obj = (SWS.splineMove)o;
			SWS.splineMove.RotationType arg0 = (SWS.splineMove.RotationType)ToLua.CheckObject(L, 2, typeof(SWS.splineMove.RotationType));
			obj.waypointRotation = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index waypointRotation on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_rotationTarget(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SWS.splineMove obj = (SWS.splineMove)o;
			UnityEngine.Transform arg0 = (UnityEngine.Transform)ToLua.CheckObject<UnityEngine.Transform>(L, 2);
			obj.rotationTarget = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index rotationTarget on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_tween(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SWS.splineMove obj = (SWS.splineMove)o;
			DG.Tweening.Tweener arg0 = (DG.Tweening.Tweener)ToLua.CheckObject<DG.Tweening.Tweener>(L, 2);
			obj.tween = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index tween on a nil value");
		}
	}
}

